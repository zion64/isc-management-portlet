/*
 * File: app/store/Customer/CustomerDataStore.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Express.store.Customer.CustomerDataStore', {
    extend: 'Ext.data.Store',

    requires: [
        'Express.model.CustomerData',
        'Ext.data.proxy.Ajax',
        'Ext.data.reader.Json',
        'Ext.data.writer.Json'
    ],

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({
            autoLoad: true,
            autoSync: true,
            model: 'Express.model.CustomerData',
            storeId: 'Customer.CustomerDataStore',
            pageSize: 10,
            proxy: {
                type: 'ajax',
                api: {
                    // The *.action is important
                    read: 'http://zeiv.iptime.org:8080/bss-webapp/api/customer/view.json',
                    create: 'http://zeiv.iptime.org:8080/bss-webapp/api/customer/create.json',
                    update: 'http://zeiv.iptime.org:8080/bss-webapp/api/customer/update.json',
                    destroy: 'http://zeiv.iptime.org:8080/bss-webapp/api/customer/delete.json'
                },
                extraParams: {
                    apikey: '1234567890'
                },
                url: 'http://zeiv.iptime.org:8080/bss-webapp/api/customer/customers.json',
                reader: {
                    type: 'json',
                    idProperty: 'customernumber',
                    messageProperty: 'message',
                    root: 'data'
                },
                writer: {
                    type: 'json',
                    encode: true,
                    root: 'data'
                },
                listeners: {
                    exception: {
                        fn: me.onAjaxException,
                        scope: me
                    }
                }
            }
        }, cfg)]);
    },

    onAjaxException: function(proxy, response, operation, eOpts) {
        var rObject = response.responseText;
        var message = '오류코드: ' + response.status + '<br/>\n오류내용:' + response.statusText + '<br/>\n응답문: ' + rObject + '<br/>\n\n리모트 에러 상세내용: ' + operation.getError();

        Ext.MessageBox.show({
                                title: '에러!!!',
                                msg: message,
                                icon: Ext.MessageBox.ERROR,
                                buttons: Ext.Msg.OK
                            });
    }

});